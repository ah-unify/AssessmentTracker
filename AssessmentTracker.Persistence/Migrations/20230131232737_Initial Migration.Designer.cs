// <auto-generated />
using System;
using AssessmentTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssessmentTracker.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230131232737_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CoursePercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.AssessmentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Grade")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssessmentRecord");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("RegisteredCoursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegisteredStudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("RegisteredCoursesId", "RegisteredStudentsId");

                    b.HasIndex("RegisteredStudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("AssessmentTracker.Domain.Entities.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.AssessmentRecord", b =>
                {
                    b.HasOne("AssessmentTracker.Domain.Entities.Assessment", "Assessment")
                        .WithMany("Records")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentTracker.Domain.Entities.Student", "Student")
                        .WithMany("AssessmentRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("AssessmentTracker.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("RegisteredCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentTracker.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("RegisteredStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Course", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("AssessmentTracker.Domain.Entities.Student", b =>
                {
                    b.Navigation("AssessmentRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
